---
// PaintCanvas.astro - A simple paint canvas component
---

<div class="max-w-4xl mx-auto p-4">
  <div class="bg-yellow-50 rounded-lg shadow-lg p-4">
    <!-- Toolbar -->
    <div class="flex flex-wrap gap-2 mb-4 bg-yellow-100 p-2 rounded-lg">
      <div class="flex items-center space-x-1 sm:space-x-2">
        <div class="flex space-x-1 sm:space-x-2 relative">
          <!-- Pope Intervention Container -->
          <div id="popeIntervention" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center pointer-events-none opacity-0 transition-opacity duration-300 z-50">
            <div id="popeContainer" class="bg-white rounded-lg p-6 shadow-xl transform scale-95 opacity-0 transition-all duration-300">
              <div class="flex flex-col items-center gap-4">
                <img id="popeImage" src="/pope_images/side_face_left.png" alt="Jan Pawe≈Ç II" class="w-32 h-32 object-contain">
                <p class="text-xl font-bold text-amber-700 text-center">TYLKO RZU≈ÅTY!</p>
                <button id="popeConfirmBtn" class="px-6 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition">
                  Dobrze, Ojcze ≈öwiƒôty
                </button>
              </div>
            </div>
          </div>
          <button id="blackBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-black border-2 border-amber-500 rounded-full shadow-sm hover:scale-110 transition" data-color="#000000" aria-label="Black color"></button>
          <button id="yellowBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-yellow-400 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#facc15" aria-label="Yellow color"></button>
          <button id="redBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-red-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#ef4444" aria-label="Red color"></button>
          <button id="greenBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-green-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#10b981" aria-label="Green color"></button>
          <button id="blueBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-blue-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#3b82f6" aria-label="Blue color"></button>
          <button id="purpleBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-purple-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#a855f7" aria-label="Purple color"></button>
          
          <!-- Custom Colors Container -->
          <div id="customColorsContainer" class="flex space-x-1 sm:space-x-2"></div>
          
          <!-- Custom Color Button -->
          <button id="customColorBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-r from-red-500 via-green-500 to-blue-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" aria-label="Custom color">
            <div class="w-full h-full rounded-full bg-white opacity-50"></div>
          </button>
        </div>
        
        <div class="hidden sm:block h-8 sm:h-10 border-r border-yellow-200 mx-2"></div>
        
        <div class="flex items-center space-x-1 sm:space-x-2">
          <button id="sizeSmall" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="3" aria-label="Small brush size">
            <div class="w-1 h-1 bg-gray-800 rounded-full"></div>
          </button>
          <button id="sizeMedium" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="5" aria-label="Medium brush size">
            <div class="w-2 h-2 bg-gray-800 rounded-full"></div>
          </button>
          <button id="sizeLarge" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="10" aria-label="Large brush size">
            <div class="w-4 h-4 bg-gray-800 rounded-full"></div>
          </button>
        </div>

        <div class="hidden sm:block h-8 sm:h-10 border-r border-yellow-200 mx-2"></div>
        
        <button id="eraserBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-color="#ffffff" aria-label="Eraser">
          <span class="text-gray-500">‚å´</span>
        </button>
      </div>
      
      <!-- Add Barka Button -->
      <div class="flex items-center gap-2">
        <button
          id="barkaBtn"
          class="px-4 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition flex items-center gap-2"
        >
          <span id="barkaIcon">üéµ</span>
          <span id="barkaText">Barka</span>
        </button>
      </div>
    </div>

    <!-- Canvas Container -->
    <div class="relative">
      <canvas
        id="paintCanvas"
        class="w-full border-2 border-yellow-200 rounded-lg bg-white"
        width="800"
        height="600"
      ></canvas>
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-between mt-4">
      <button
        id="clearBtn"
        class="px-6 py-2 bg-amber-100 text-amber-700 rounded-md font-bold hover:bg-amber-200 transition"
      >
        Wyczy≈õƒá
      </button>
      <button
        id="downloadBtn"
        class="px-6 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition"
      >
        Zapisz
      </button>
    </div>
  </div>
</div>

<!-- Add Custom Color Picker Modal -->
<div id="customColorModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center pointer-events-none opacity-0 transition-opacity duration-300 z-50">
  <div class="bg-white rounded-lg p-6 shadow-xl transform scale-95 opacity-0 transition-all duration-300">
    <div class="flex flex-col items-center gap-4">
      <!-- Pope Face Container -->
      <div class="relative w-32 h-32">
        <img src="/pope_images/face_happy.png" alt="Happy Pope" class="absolute inset-0 w-full h-full object-contain transition-opacity duration-300" id="happyPopeFace">
        <img src="/pope_images/face_unhappy.png" alt="Unhappy Pope" class="absolute inset-0 w-full h-full object-contain transition-opacity duration-300 opacity-0" id="unhappyPopeFace">
      </div>
      
      <!-- Color Picker -->
      <input type="color" id="colorPicker" class="w-full h-12 rounded cursor-pointer">
      
      <!-- Color Preview -->
      <div id="colorPreview" class="w-full h-8 rounded border-2 border-gray-300"></div>
      
      <!-- Buttons -->
      <div class="flex gap-2">
        <button id="cancelColorBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md font-bold hover:bg-gray-300 transition">
          Anuluj
        </button>
        <button id="addColorBtn" class="px-4 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition">
          Dodaj kolor
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the canvas and context
    const canvas = document.getElementById('paintCanvas') as HTMLCanvasElement | null;
    if (!canvas) {
      console.error('Could not find canvas element');
      return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      console.error('Could not get 2D context');
      return;
    }
    
    // Set default color and line width
    let currentColor = '#000000';
    let currentSize = 5; // Default medium brush size
    let isDrawing = false;
    
    // Make canvas responsive
    function resizeCanvas() {
      if (!canvas || !ctx) return;
      
      const containerWidth = canvas.parentElement?.clientWidth || canvas.width;
      const containerHeight = Math.floor(containerWidth * (canvas.height / canvas.width));
      
      // Store the current drawing
      const tempCanvas = document.createElement('canvas');
      const tempCtx = tempCanvas.getContext('2d');
      if (!tempCtx) return;
      
      tempCanvas.width = canvas.width;
      tempCanvas.height = canvas.height;
      tempCtx.drawImage(canvas, 0, 0);
      
      // Style canvas width to fit container
      canvas.style.width = '100%';
      canvas.style.height = 'auto';
      
      // Restore the drawing
      ctx.drawImage(tempCanvas, 0, 0);
    }
    
    // Initialize the canvas with a white background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Set initial drawing settings
    ctx.lineWidth = currentSize;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.strokeStyle = currentColor;
    
    // Resize canvas on load
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Mouse event handlers
    function startDrawing(e: MouseEvent) {
      isDrawing = true;
      draw(e);
    }
    
    function stopDrawing() {
      if (!ctx) return;
      isDrawing = false;
      ctx.beginPath();
    }
    
    function draw(e: MouseEvent) {
      if (!isDrawing || !canvas || !ctx) return;
      
      // Get correct mouse position
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      // Calculate scaling factor if canvas is rendered at a different size
      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;
      
      const canvasX = x * scaleX;
      const canvasY = y * scaleY;
      
      ctx.lineTo(canvasX, canvasY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(canvasX, canvasY);
    }
    
    // Add event listeners for mouse
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseout', stopDrawing);
    
    // Add touch support for mobile devices
    canvas.addEventListener('touchstart', (e: TouchEvent) => {
      e.preventDefault();
      if (e.touches && e.touches[0]) {
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousedown', {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        canvas.dispatchEvent(mouseEvent);
      }
    });
    
    canvas.addEventListener('touchend', (e: TouchEvent) => {
      e.preventDefault();
      const mouseEvent = new MouseEvent('mouseup', {});
      canvas.dispatchEvent(mouseEvent);
    });
    
    canvas.addEventListener('touchmove', (e: TouchEvent) => {
      e.preventDefault();
      if (e.touches && e.touches[0]) {
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousemove', {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        canvas.dispatchEvent(mouseEvent);
      }
    });
    
    // Color buttons - using data attributes for colors
    const colorButtons = document.querySelectorAll('[data-color]');
    let activeColorButton = document.getElementById('blackBtn') as HTMLElement | null;
    
    // Pope Intervention Feature
    let popeIntervention = false;
    const allowedColors = ['#facc15', '#f59e0b', '#fbbf24', '#fcd34d']; // Yellow variants
    const customAllowedColors = new Set<string>(); // Store custom allowed colors
    const popeImage = '/pope_images/side_face_left.png';

    // Initialize pope elements
    const popeInterventionContainer = document.getElementById('popeIntervention');
    const popeImageElement = document.getElementById('popeImage') as HTMLImageElement;
    const popeContainer = document.getElementById('popeContainer');
    const popeConfirmBtn = document.getElementById('popeConfirmBtn');

    console.log('Pope elements:', {
      container: popeInterventionContainer,
      image: popeImageElement,
      containerParent: popeContainer
    });

    // Function to show pope intervention
    function showPopeIntervention() {
      if (!popeContainer || !popeInterventionContainer || !popeImageElement) {
        console.error('Pope elements not found');
        return;
      }

      // Reset styles
      popeContainer.style.transform = 'scale(0.95)';
      popeContainer.style.opacity = '0';
      popeInterventionContainer.style.opacity = '1';
      popeInterventionContainer.classList.remove('pointer-events-none');
      
      // Set the pope image
      popeImageElement.src = popeImage;
      console.log('Showing pope image:', popeImage);

      // Show modal with animation
      requestAnimationFrame(() => {
        popeContainer.style.transform = 'scale(1)';
        popeContainer.style.opacity = '1';
      });
    }

    // Function to hide pope intervention
    function hidePopeIntervention() {
      if (!popeContainer || !popeInterventionContainer) return;
      
      // Hide modal with animation
      popeContainer.style.transform = 'scale(0.95)';
      popeContainer.style.opacity = '0';
      
      setTimeout(() => {
        popeInterventionContainer.style.opacity = '0';
        popeInterventionContainer.classList.add('pointer-events-none');
        popeIntervention = false;
      }, 300);
    }

    // Add click handler for confirm button
    if (popeConfirmBtn) {
      popeConfirmBtn.addEventListener('click', () => {
        hidePopeIntervention();
      });
    }

    // Function to check if a color is yellowish
    function isYellowish(color: string): boolean {
      // Convert hex to RGB
      const r = parseInt(color.slice(1, 3), 16);
      const g = parseInt(color.slice(3, 5), 16);
      const b = parseInt(color.slice(5, 7), 16);
      
      // Check if green component is high and red is higher than blue
      return g > 200 && r > b;
    }

    // Update color selection function
    function setColor(color: string) {
      if (!ctx) return;
      
      console.log('Color selected:', color);
      console.log('Allowed colors:', allowedColors);
      console.log('Custom allowed colors:', customAllowedColors);
      
      // Check if color is allowed (any yellow or custom allowed color)
      const isAllowed = allowedColors.includes(color) || 
                        customAllowedColors.has(color) || 
                        color === '#ffffff'; // Allow white for eraser
      console.log('Is color allowed?', isAllowed);
      
      if (!isAllowed && !popeIntervention) {
        console.log('Triggering pope intervention');
        popeIntervention = true;
        showPopeIntervention();
        
        // Set forced yellow
        currentColor = '#facc15';
        ctx.strokeStyle = currentColor;
      } else {
        currentColor = color;
        ctx.strokeStyle = color;
      }
    }

    // 2137 Easter Egg
    let last2137Check = 0;
    function check2137() {
      if (!canvas || !ctx) return;
      
      const now = Date.now();
      if (now - last2137Check < 1000) return; // Check every second
      last2137Check = now;

      const date = new Date();
      if (date.getHours() === 21 && date.getMinutes() === 37) {
        // Special 2137 event!
        const audio = new Audio('/audio/barka.mp3');
        audio.volume = 0.5;
        audio.play();
        
        // Add a special effect to the canvas
        ctx.fillStyle = 'rgba(250, 204, 21, 0.1)'; // Yellow glow
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }

    // Barka Audio Player
    const barkaBtn = document.getElementById('barkaBtn') as HTMLElement;
    const barkaIcon = document.getElementById('barkaIcon') as HTMLElement;
    const barkaText = document.getElementById('barkaText') as HTMLElement;
    
    let barkaAudio: HTMLAudioElement | null = null;
    let isPlaying = false;

    // Function to initialize audio
    function initializeAudio() {
      if (barkaAudio) return;
      
      barkaAudio = new Audio('/audio/barka.mp3');
      barkaAudio.volume = 0.5;
      
      barkaAudio.addEventListener('ended', () => {
        isPlaying = false;
        barkaIcon.textContent = 'üéµ';
        barkaText.textContent = 'Barka';
        barkaBtn.classList.remove('bg-amber-600');
      });
    }

    // Play/Pause button
    barkaBtn.addEventListener('click', () => {
      initializeAudio();
      
      if (!barkaAudio) return;
      
      if (isPlaying) {
        barkaAudio.pause();
        barkaIcon.textContent = 'üéµ';
        barkaText.textContent = 'Barka';
        barkaBtn.classList.remove('bg-amber-600');
      } else {
        barkaAudio.play();
        barkaIcon.textContent = '‚è∏Ô∏è';
        barkaText.textContent = 'Pause';
        barkaBtn.classList.add('bg-amber-600');
      }
      
      isPlaying = !isPlaying;
    });

    // Add setSize function
    function setSize(size: number) {
      if (!ctx) return;
      currentSize = size;
      ctx.lineWidth = size;
    }

    // Add 2137 check to animation loop
    function animate() {
      requestAnimationFrame(animate);
      check2137();
    }
    animate();

    // Color buttons - using data attributes for colors
    colorButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Get color from data attribute
        const color = button.getAttribute('data-color');
        if (color) {
          // Check if color is allowed (any yellow or custom allowed color)
          const isAllowed = allowedColors.includes(color) || 
                           customAllowedColors.has(color) || 
                           color === '#ffffff'; // Allow white for eraser
          
          if (isAllowed) {
            // Update active button styling only for allowed colors
            if (activeColorButton) {
              activeColorButton.classList.remove('border-amber-500');
              activeColorButton.classList.add('border-gray-300');
            }
            button.classList.remove('border-gray-300');
            button.classList.add('border-amber-500');
            activeColorButton = button as HTMLElement;
          }
          
          setColor(color);
        }
      });
    });
    
    // Brush size buttons
    const sizeButtons = document.querySelectorAll('[data-size]');
    let activeSizeButton = document.getElementById('sizeMedium') as HTMLElement | null;
    
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const size = button.getAttribute('data-size');
        if (size) {
          setSize(parseInt(size));
          
          // Update active button styling
          if (activeSizeButton) {
            activeSizeButton.classList.remove('border-amber-500');
            activeSizeButton.classList.add('border-gray-300');
          }
          button.classList.remove('border-gray-300');
          button.classList.add('border-amber-500');
          activeSizeButton = button as HTMLElement;
        }
      });
    });
    
    // Clear button
    const clearBtn = document.getElementById('clearBtn');
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = currentColor;
      });
    }
    
    // Download button
    const downloadBtn = document.getElementById('downloadBtn');
    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        const image = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.download = 'maluj-z-papiezem.png';
        link.href = image;
        link.click();
      });
    }

    // Custom Colors Management
    const customColorsContainer = document.getElementById('customColorsContainer');
    const customColors: string[] = [];
    const MAX_CUSTOM_COLORS = 5;

    // Function to create a custom color button
    function createCustomColorButton(color: string): HTMLElement {
      const button = document.createElement('button');
      button.className = 'w-8 h-8 sm:w-10 sm:h-10 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition';
      button.style.backgroundColor = color;
      button.setAttribute('data-color', color);
      button.setAttribute('aria-label', `Custom color ${color}`);
      
      // Add click handler
      button.addEventListener('click', () => {
        if (activeColorButton) {
          activeColorButton.classList.remove('border-amber-500');
          activeColorButton.classList.add('border-gray-300');
        }
        button.classList.remove('border-gray-300');
        button.classList.add('border-amber-500');
        activeColorButton = button;
        setColor(color);
      });
      
      return button;
    }

    // Function to add a custom color
    function addCustomColor(color: string) {
      if (customColors.length >= MAX_CUSTOM_COLORS) {
        // Remove the oldest color
        const oldestColor = customColors.shift();
        if (oldestColor) {
          customAllowedColors.delete(oldestColor);
        }
        if (customColorsContainer?.firstChild) {
          customColorsContainer.removeChild(customColorsContainer.firstChild);
        }
      }
      
      customColors.push(color);
      if (isYellowish(color)) {
        customAllowedColors.add(color);
      }
      const button = createCustomColorButton(color);
      customColorsContainer?.appendChild(button);
    }

    // Custom Color Picker
    const customColorBtn = document.getElementById('customColorBtn');
    const customColorModal = document.getElementById('customColorModal');
    const colorPicker = document.getElementById('colorPicker') as HTMLInputElement;
    const colorPreview = document.getElementById('colorPreview');
    const happyPopeFace = document.getElementById('happyPopeFace');
    const unhappyPopeFace = document.getElementById('unhappyPopeFace');
    const cancelColorBtn = document.getElementById('cancelColorBtn');
    const addColorBtn = document.getElementById('addColorBtn');

    // Function to show custom color picker
    function showCustomColorPicker() {
      if (!customColorModal || !colorPreview || !happyPopeFace || !unhappyPopeFace) return;
      
      // Reset styles
      customColorModal.style.opacity = '1';
      customColorModal.classList.remove('pointer-events-none');
      
      // Set initial color
      const initialColor = currentColor;
      colorPicker.value = initialColor;
      colorPreview.style.backgroundColor = initialColor;
      
      // Set initial pope face
      updatePopeFace(initialColor);
      
      // Show modal with animation
      requestAnimationFrame(() => {
        customColorModal.querySelector('.bg-white')?.classList.remove('scale-95', 'opacity-0');
      });
    }

    // Function to hide custom color picker
    function hideCustomColorPicker() {
      if (!customColorModal) return;
      
      // Hide modal with animation
      customColorModal.querySelector('.bg-white')?.classList.add('scale-95', 'opacity-0');
      
      setTimeout(() => {
        customColorModal.style.opacity = '0';
        customColorModal.classList.add('pointer-events-none');
      }, 300);
    }

    // Function to update pope face based on color
    function updatePopeFace(color: string) {
      if (!happyPopeFace || !unhappyPopeFace) return;
      
      const isYellow = isYellowish(color);
      happyPopeFace.style.opacity = isYellow ? '1' : '0';
      unhappyPopeFace.style.opacity = isYellow ? '0' : '1';
    }

    // Add event listeners for custom color picker
    customColorBtn?.addEventListener('click', showCustomColorPicker);
    cancelColorBtn?.addEventListener('click', hideCustomColorPicker);
    
    colorPicker?.addEventListener('input', (e) => {
      const color = (e.target as HTMLInputElement).value;
      if (colorPreview) {
        colorPreview.style.backgroundColor = color;
      }
      updatePopeFace(color);
    });
    
    addColorBtn?.addEventListener('click', () => {
      const selectedColor = colorPicker.value;
      if (isYellowish(selectedColor)) {
        addCustomColor(selectedColor);
        setColor(selectedColor);
      } else {
        // Show pope intervention for non-yellow colors
        if (!popeIntervention) {
          popeIntervention = true;
          showPopeIntervention();
          setColor('#facc15'); // Force yellow
        }
      }
      hideCustomColorPicker();
    });
  });
</script> 