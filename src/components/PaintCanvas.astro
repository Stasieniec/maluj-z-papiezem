---
// PaintCanvas.astro - A simple paint canvas component
---

<div class="max-w-4xl mx-auto p-4">
  <div class="bg-yellow-50 rounded-lg shadow-lg p-4">
    <!-- Toolbar -->
    <div class="flex flex-wrap gap-2 mb-4 bg-yellow-100 p-2 rounded-lg">
      <div class="flex items-center space-x-1 sm:space-x-2">
        <div class="flex space-x-1 sm:space-x-2">
          <button id="blackBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-black border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#000000" aria-label="Black color"></button>
          <button id="redBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-red-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#ef4444" aria-label="Red color"></button>
          <button id="greenBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-green-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#10b981" aria-label="Green color"></button>
          <button id="blueBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-blue-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#3b82f6" aria-label="Blue color"></button>
          <button id="yellowBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-yellow-400 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#facc15" aria-label="Yellow color"></button>
          <button id="purpleBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-purple-500 border-2 border-gray-300 rounded-full shadow-sm hover:scale-110 transition" data-color="#a855f7" aria-label="Purple color"></button>
        </div>
        
        <div class="hidden sm:block h-8 sm:h-10 border-r border-yellow-200 mx-2"></div>
        
        <div class="flex items-center space-x-1 sm:space-x-2">
          <button id="sizeSmall" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="3" aria-label="Small brush size">
            <div class="w-1 h-1 bg-gray-800 rounded-full"></div>
          </button>
          <button id="sizeMedium" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="5" aria-label="Medium brush size">
            <div class="w-2 h-2 bg-gray-800 rounded-full"></div>
          </button>
          <button id="sizeLarge" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-size="10" aria-label="Large brush size">
            <div class="w-4 h-4 bg-gray-800 rounded-full"></div>
          </button>
        </div>

        <div class="hidden sm:block h-8 sm:h-10 border-r border-yellow-200 mx-2"></div>
        
        <button id="eraserBtn" class="w-8 h-8 sm:w-10 sm:h-10 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-yellow-50 transition" data-color="#ffffff" aria-label="Eraser">
          <span class="text-gray-500">‚å´</span>
        </button>
      </div>
      
      <!-- Add Barka Button -->
      <button
        id="barkaBtn"
        class="px-4 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition flex items-center gap-2"
      >
        <span>üéµ Barka</span>
      </button>
    </div>

    <!-- Canvas Container -->
    <div class="relative">
      <canvas
        id="paintCanvas"
        class="w-full border-2 border-yellow-200 rounded-lg bg-white"
        width="800"
        height="600"
      ></canvas>
      <!-- Pope Intervention Container -->
      <div id="popeIntervention" class="absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-300">
        <div class="absolute bottom-4 right-4 transform translate-y-full opacity-0 transition-transform duration-300">
          <div class="relative">
            <img id="popeImage" src="/pope_images/waving-hand.webp" alt="Jan Pawe≈Ç II" class="w-32 h-32 object-contain">
            <div class="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-lg p-2 border-2 border-yellow-200">
              <p class="text-amber-700 font-bold">TYLKO RZU≈ÅTY!</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-between mt-4">
      <button
        id="clearBtn"
        class="px-6 py-2 bg-amber-100 text-amber-700 rounded-md font-bold hover:bg-amber-200 transition"
      >
        Wyczy≈õƒá
      </button>
      <button
        id="downloadBtn"
        class="px-6 py-2 bg-amber-500 text-white rounded-md font-bold hover:bg-amber-600 transition"
      >
        Zapisz
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the canvas and context
    const canvas = document.getElementById('paintCanvas') as HTMLCanvasElement | null;
    if (!canvas) {
      console.error('Could not find canvas element');
      return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      console.error('Could not get 2D context');
      return;
    }
    
    // Set default color and line width
    let currentColor = '#000000';
    let currentSize = 5; // Default medium brush size
    let isDrawing = false;
    
    // Make canvas responsive
    function resizeCanvas() {
      if (!canvas || !ctx) return;
      
      const containerWidth = canvas.parentElement?.clientWidth || canvas.width;
      const containerHeight = Math.floor(containerWidth * (canvas.height / canvas.width));
      
      // Store the current drawing
      const tempCanvas = document.createElement('canvas');
      const tempCtx = tempCanvas.getContext('2d');
      if (!tempCtx) return;
      
      tempCanvas.width = canvas.width;
      tempCanvas.height = canvas.height;
      tempCtx.drawImage(canvas, 0, 0);
      
      // Style canvas width to fit container
      canvas.style.width = '100%';
      canvas.style.height = 'auto';
      
      // Restore the drawing
      ctx.drawImage(tempCanvas, 0, 0);
    }
    
    // Initialize the canvas with a white background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Set initial drawing settings
    ctx.lineWidth = currentSize;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    ctx.strokeStyle = currentColor;
    
    // Resize canvas on load
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Mouse event handlers
    function startDrawing(e: MouseEvent) {
      isDrawing = true;
      draw(e);
    }
    
    function stopDrawing() {
      if (!ctx) return;
      isDrawing = false;
      ctx.beginPath();
    }
    
    function draw(e: MouseEvent) {
      if (!isDrawing || !canvas || !ctx) return;
      
      // Get correct mouse position
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      // Calculate scaling factor if canvas is rendered at a different size
      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;
      
      const canvasX = x * scaleX;
      const canvasY = y * scaleY;
      
      ctx.lineTo(canvasX, canvasY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(canvasX, canvasY);
    }
    
    // Add event listeners for mouse
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseout', stopDrawing);
    
    // Add touch support for mobile devices
    canvas.addEventListener('touchstart', (e: TouchEvent) => {
      e.preventDefault();
      if (e.touches && e.touches[0]) {
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousedown', {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        canvas.dispatchEvent(mouseEvent);
      }
    });
    
    canvas.addEventListener('touchend', (e: TouchEvent) => {
      e.preventDefault();
      const mouseEvent = new MouseEvent('mouseup', {});
      canvas.dispatchEvent(mouseEvent);
    });
    
    canvas.addEventListener('touchmove', (e: TouchEvent) => {
      e.preventDefault();
      if (e.touches && e.touches[0]) {
        const touch = e.touches[0];
        const mouseEvent = new MouseEvent('mousemove', {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        canvas.dispatchEvent(mouseEvent);
      }
    });
    
    // Color buttons - using data attributes for colors
    const colorButtons = document.querySelectorAll('[data-color]');
    let activeColorButton = document.getElementById('blackBtn') as HTMLElement | null;
    
    colorButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Get color from data attribute
        const color = button.getAttribute('data-color');
        if (color) {
          setColor(color);
          
          // Update active button styling
          if (activeColorButton) {
            activeColorButton.classList.remove('border-amber-500');
            activeColorButton.classList.add('border-gray-300');
          }
          button.classList.remove('border-gray-300');
          button.classList.add('border-amber-500');
          activeColorButton = button as HTMLElement;
        }
      });
    });
    
    // Brush size buttons
    const sizeButtons = document.querySelectorAll('[data-size]');
    let activeSizeButton = document.getElementById('sizeMedium') as HTMLElement | null;
    
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const size = button.getAttribute('data-size');
        if (size) {
          setSize(parseInt(size));
          
          // Update active button styling
          if (activeSizeButton) {
            activeSizeButton.classList.remove('border-amber-500');
            activeSizeButton.classList.add('border-gray-300');
          }
          button.classList.remove('border-gray-300');
          button.classList.add('border-amber-500');
          activeSizeButton = button as HTMLElement;
        }
      });
    });
    
    // Clear button
    const clearBtn = document.getElementById('clearBtn');
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = currentColor;
      });
    }
    
    // Download button
    const downloadBtn = document.getElementById('downloadBtn');
    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        const image = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.download = 'maluj-z-papiezem.png';
        link.href = image;
        link.click();
      });
    }
    
    // Pope Intervention Feature
    let popeIntervention = false;
    const allowedColors = ['#facc15', '#f59e0b', '#fbbf24', '#fcd34d']; // Yellow variants
    const popeImages = {
      wave: '/pope_images/waving-hand.webp',
      face: '/pope_images/face.png',
      side: '/pope_images/side_face_left.png',
      hands: '/pope_images/front_photo_hands_up.png'
    };
    const popeInterventionContainer = document.getElementById('popeIntervention') as HTMLElement;
    const popeImage = document.getElementById('popeImage') as HTMLImageElement;
    const popeContainer = popeImage.parentElement as HTMLElement;

    // 2137 Easter Egg
    let last2137Check = 0;
    function check2137() {
      if (!canvas || !ctx) return;
      
      const now = Date.now();
      if (now - last2137Check < 1000) return; // Check every second
      last2137Check = now;

      const date = new Date();
      if (date.getHours() === 21 && date.getMinutes() === 37) {
        // Special 2137 event!
        const audio = new Audio('/audio/barka.mp3');
        audio.volume = 0.5;
        audio.play();
        
        // Add a special effect to the canvas
        ctx.fillStyle = 'rgba(250, 204, 21, 0.1)'; // Yellow glow
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
    }

    // Barka Button
    const barkaBtn = document.getElementById('barkaBtn') as HTMLElement;
    let barkaPlaying = false;
    let barkaAudio: HTMLAudioElement | null = null;

    barkaBtn.addEventListener('click', () => {
      if (!barkaPlaying) {
        barkaAudio = new Audio('/barka.mp3');
        barkaAudio.volume = 0.5;
        barkaAudio.play();
        barkaPlaying = true;
        barkaBtn.classList.add('bg-amber-600');
        barkaBtn.innerHTML = '<span>üéµ Barka (Stop)</span>';
      } else {
        barkaAudio?.pause();
        barkaAudio = null;
        barkaPlaying = false;
        barkaBtn.classList.remove('bg-amber-600');
        barkaBtn.innerHTML = '<span>üéµ Barka</span>';
      }
    });

    // Add setSize function
    function setSize(size: number) {
      if (!ctx) return;
      currentSize = size;
      ctx.lineWidth = size;
    }

    // Update color selection function
    function setColor(color: string) {
      if (!ctx) return;
      
      // Check if color is allowed (any yellow)
      const isAllowed = allowedColors.includes(color) || color === '#ffffff'; // Allow white for eraser
      
      if (!isAllowed && !popeIntervention) {
        popeIntervention = true;
        
        // Show pope intervention with animation
        popeInterventionContainer.classList.remove('opacity-0');
        popeContainer.classList.remove('translate-y-full', 'opacity-0');
        
        // Randomly select a pope image
        const images = Object.values(popeImages);
        const randomPope = images[Math.floor(Math.random() * images.length)];
        popeImage.src = randomPope;
        
        // Add a fun animation to the pope
        popeContainer.classList.add('animate-bounce');
        
        // Set forced yellow
        currentColor = '#facc15';
        ctx.strokeStyle = currentColor;
        
        // Update active button
        if (activeColorButton) {
          activeColorButton.classList.remove('border-amber-500');
          activeColorButton.classList.add('border-gray-300');
        }
        const yellowBtn = document.getElementById('yellowBtn');
        if (yellowBtn) {
          yellowBtn.classList.remove('border-gray-300');
          yellowBtn.classList.add('border-amber-500');
          activeColorButton = yellowBtn as HTMLElement;
        }
        
        // Hide pope after a delay
        setTimeout(() => {
          popeContainer.classList.add('translate-y-full', 'opacity-0');
          setTimeout(() => {
            popeInterventionContainer.classList.add('opacity-0');
            popeContainer.classList.remove('animate-bounce');
            popeIntervention = false;
          }, 300);
        }, 2000);
      } else {
        currentColor = color;
        ctx.strokeStyle = color;
      }
    }

    // Add 2137 check to animation loop
    function animate() {
      requestAnimationFrame(animate);
      check2137();
    }
    animate();
  });
</script> 